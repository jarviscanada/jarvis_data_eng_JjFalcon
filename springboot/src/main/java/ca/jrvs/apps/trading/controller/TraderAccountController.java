package ca.jrvs.apps.trading.controller;


import ca.jrvs.apps.trading.model.TraderAccountView;
import ca.jrvs.apps.trading.model.domain.Account;
import ca.jrvs.apps.trading.model.domain.Trader;
import ca.jrvs.apps.trading.service.TraderAccountService;
import ca.jrvs.apps.trading.util.ResponseExceptionUtil;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import java.sql.Date;
import java.time.LocalDate;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;

@Api(value = "Trader", produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
@Controller
@RequestMapping("/trader")
public class TraderAccountController {

  private TraderAccountService traderAccountService;

  @Autowired
  public TraderAccountController(TraderAccountService traderAccountService){
    this.traderAccountService = traderAccountService;
  }

  @ApiOperation(value = "Create a trader and an account", notes = "TraderID and AccountID are autogenerated by the database, and they should be identical.  Assume each trader has exactly one account.")
  @ResponseBody
  // POST /firstname=...&lastname=...&email=...&country=...&birthdate=...
  @PostMapping(path = "/firstname/{firstName}/lastname/{lastName}/dob/{dob}/country/{country}/email/{email})", produces = {MediaType.APPLICATION_JSON_UTF8_VALUE})
  public TraderAccountView createTrader(@PathVariable String firstName, @PathVariable String lastName, @PathVariable @DateTimeFormat(pattern = "yyyy-MM-dd") LocalDate dob, @PathVariable String country, @PathVariable String email){
    try {
      Trader trader = new Trader();
      trader.setFirstName(firstName);
      trader.setLastName(lastName);
      trader.setCountry(country);
      trader.setEmail(email);
      trader.setDob(Date.valueOf(dob));
      return traderAccountService.createTraderAndAccount(trader);
    } catch (Exception e) {
      throw ResponseExceptionUtil.getResponseStatusException(e);
    }
  }

  @ApiOperation(value = "Create a trader and an account with DTO", notes = "TraderID and AccountID are autogenerated by the database, and they should be identical.  Assume each trader has exactly one account.")
  @ResponseStatus(HttpStatus.CREATED)
  @ResponseBody
  // POST /trader/
  @PostMapping(path = "/", produces = {MediaType.APPLICATION_JSON_UTF8_VALUE})
  public TraderAccountView createTrader(@RequestBody Trader trader){
    try {
      return traderAccountService.createTraderAndAccount(trader);
    } catch (Exception e) {
      throw ResponseExceptionUtil.getResponseStatusException(e);
    }
  }

  @ApiOperation(value = "Delete a trader corresponding to the id", notes = "Delete a trader IFF its account amount is 0 and no open positions.  Also delete teh associated account and securityOrders.")
  @ApiResponses(value = {@ApiResponse(code = 400, message = "Unable to delete the user")})
  // DELETE /traderId/{traderId}
  @DeleteMapping(path = "/traderId/{traderId}")
  @ResponseStatus(HttpStatus.OK)
  public void deleteTrader(@PathVariable Integer traderId){
    try {
      traderAccountService.deleteTraderById(traderId);
    } catch (Exception e){
      throw ResponseExceptionUtil.getResponseStatusException(e);
    }
  }

  @ApiOperation(value = "Deposit funds", notes = "Deposit funds to the account that associates with the given traderId.  Deposit amount > 0")
  @ApiResponses(value = { @ApiResponse(code = 404, message = "traderId is not found"), @ApiResponse(code = 400, message = "Unable to depsit due to user input")})
  @ResponseStatus(HttpStatus.OK)
  @ResponseBody
  // PUT /deposit/traderId/{traderId}/amount/{amount}
  @PutMapping(path = "/deposit/traderId/{traderId}/amount/{amount}")
  public Account depositFund(@PathVariable Integer traderId, @PathVariable Double amount) {
    try {
      return traderAccountService.deposit(traderId, amount);
    } catch (Exception e) {
      throw ResponseExceptionUtil.getResponseStatusException(e);
    }
  }

  @ApiOperation(value = "Withdraw funds", notes = "Withdraw funds to the account that associates with the given traderId.  Withdraw amount > 0 and < balance")
  @ApiResponses(value = { @ApiResponse(code = 404, message = "traderId is not found"), @ApiResponse(code = 400, message = "Unable to withdraw due to user input")})
  @ResponseStatus(HttpStatus.OK)
  @ResponseBody
  // PUT /withdraw/traderId/{traderId}/amount/{amount}
  @PutMapping(path = "/withdraw/traderId/{traderId}/amount/{amount}")
  public Account withdrawFund(@PathVariable Integer traderId, @PathVariable Double amount){
    try {
      return traderAccountService.withdraw(traderId, amount);
    } catch (Exception e){
      throw ResponseExceptionUtil.getResponseStatusException(e);
    }
  }
}
